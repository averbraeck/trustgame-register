/*
 * This file is generated by jOOQ.
 */
package org.transsonic.trustgame.data.trustgame.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.transsonic.trustgame.data.trustgame.Indexes;
import org.transsonic.trustgame.data.trustgame.Keys;
import org.transsonic.trustgame.data.trustgame.Trustgame;
import org.transsonic.trustgame.data.trustgame.tables.records.RoundRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Round extends TableImpl<RoundRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trustgame.round</code>
     */
    public static final Round ROUND = new Round();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoundRecord> getRecordType() {
        return RoundRecord.class;
    }

    /**
     * The column <code>trustgame.round.ID</code>.
     */
    public final TableField<RoundRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>trustgame.round.Game_ID</code>.
     */
    public final TableField<RoundRecord, Integer> GAME_ID = createField(DSL.name("Game_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.round.RoundNumber</code>.
     */
    public final TableField<RoundRecord, Integer> ROUNDNUMBER = createField(DSL.name("RoundNumber"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.round.TestRound</code>. If true, do not count the points for ths round
     */
    public final TableField<RoundRecord, Byte> TESTROUND = createField(DSL.name("TestRound"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.TINYINT)), this, "If true, do not count the points for ths round");

    private Round(Name alias, Table<RoundRecord> aliased) {
        this(alias, aliased, null);
    }

    private Round(Name alias, Table<RoundRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>trustgame.round</code> table reference
     */
    public Round(String alias) {
        this(DSL.name(alias), ROUND);
    }

    /**
     * Create an aliased <code>trustgame.round</code> table reference
     */
    public Round(Name alias) {
        this(alias, ROUND);
    }

    /**
     * Create a <code>trustgame.round</code> table reference
     */
    public Round() {
        this(DSL.name("round"), null);
    }

    public <O extends Record> Round(Table<O> child, ForeignKey<O, RoundRecord> key) {
        super(child, key, ROUND);
    }

    @Override
    public Schema getSchema() {
        return Trustgame.TRUSTGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ROUND_FK_ROUND_GAME_IDX);
    }

    @Override
    public Identity<RoundRecord, Integer> getIdentity() {
        return (Identity<RoundRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RoundRecord> getPrimaryKey() {
        return Keys.KEY_ROUND_PRIMARY;
    }

    @Override
    public List<UniqueKey<RoundRecord>> getKeys() {
        return Arrays.<UniqueKey<RoundRecord>>asList(Keys.KEY_ROUND_PRIMARY, Keys.KEY_ROUND_IDROUND_UNIQUE);
    }

    @Override
    public List<ForeignKey<RoundRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RoundRecord, ?>>asList(Keys.FK_ROUND_GAME);
    }

    private transient Game _game;

    public Game game() {
        if (_game == null)
            _game = new Game(this, Keys.FK_ROUND_GAME);

        return _game;
    }

    @Override
    public Round as(String alias) {
        return new Round(DSL.name(alias), this);
    }

    @Override
    public Round as(Name alias) {
        return new Round(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Round rename(String name) {
        return new Round(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Round rename(Name name) {
        return new Round(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Byte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
