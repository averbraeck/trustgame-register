/*
 * This file is generated by jOOQ.
 */
package org.transsonic.trustgame.data.trustgame.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.transsonic.trustgame.data.trustgame.Indexes;
import org.transsonic.trustgame.data.trustgame.Keys;
import org.transsonic.trustgame.data.trustgame.Trustgame;
import org.transsonic.trustgame.data.trustgame.tables.records.UserroundRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Userround extends TableImpl<UserroundRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trustgame.userround</code>
     */
    public static final Userround USERROUND = new Userround();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserroundRecord> getRecordType() {
        return UserroundRecord.class;
    }

    /**
     * The column <code>trustgame.userround.ID</code>. The table indicates that a user reached a certain round
     */
    public final TableField<UserroundRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "The table indicates that a user reached a certain round");

    /**
     * The column <code>trustgame.userround.GamePlay_ID</code>.
     */
    public final TableField<UserroundRecord, Integer> GAMEPLAY_ID = createField(DSL.name("GamePlay_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.userround.Round_ID</code>.
     */
    public final TableField<UserroundRecord, Integer> ROUND_ID = createField(DSL.name("Round_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.userround.GameUser_ID</code>.
     */
    public final TableField<UserroundRecord, Integer> GAMEUSER_ID = createField(DSL.name("GameUser_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    private Userround(Name alias, Table<UserroundRecord> aliased) {
        this(alias, aliased, null);
    }

    private Userround(Name alias, Table<UserroundRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>trustgame.userround</code> table reference
     */
    public Userround(String alias) {
        this(DSL.name(alias), USERROUND);
    }

    /**
     * Create an aliased <code>trustgame.userround</code> table reference
     */
    public Userround(Name alias) {
        this(alias, USERROUND);
    }

    /**
     * Create a <code>trustgame.userround</code> table reference
     */
    public Userround() {
        this(DSL.name("userround"), null);
    }

    public <O extends Record> Userround(Table<O> child, ForeignKey<O, UserroundRecord> key) {
        super(child, key, USERROUND);
    }

    @Override
    public Schema getSchema() {
        return Trustgame.TRUSTGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERROUND_FK_GAMEPLAYROUND_GAMEPLAY1_IDX, Indexes.USERROUND_FK_GAMEPLAYROUND_ROUND1_IDX, Indexes.USERROUND_FK_GAMEPLAYROUND_USER1_IDX);
    }

    @Override
    public Identity<UserroundRecord, Integer> getIdentity() {
        return (Identity<UserroundRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserroundRecord> getPrimaryKey() {
        return Keys.KEY_USERROUND_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserroundRecord>> getKeys() {
        return Arrays.<UniqueKey<UserroundRecord>>asList(Keys.KEY_USERROUND_PRIMARY, Keys.KEY_USERROUND_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<UserroundRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserroundRecord, ?>>asList(Keys.FK_GAMEPLAYROUND_GAMEPLAY1, Keys.FK_GAMEPLAYROUND_ROUND1, Keys.FK_GAMEPLAYROUND_USER1);
    }

    private transient Gameplay _gameplay;
    private transient Round _round;
    private transient Gameuser _gameuser;

    public Gameplay gameplay() {
        if (_gameplay == null)
            _gameplay = new Gameplay(this, Keys.FK_GAMEPLAYROUND_GAMEPLAY1);

        return _gameplay;
    }

    public Round round() {
        if (_round == null)
            _round = new Round(this, Keys.FK_GAMEPLAYROUND_ROUND1);

        return _round;
    }

    public Gameuser gameuser() {
        if (_gameuser == null)
            _gameuser = new Gameuser(this, Keys.FK_GAMEPLAYROUND_USER1);

        return _gameuser;
    }

    @Override
    public Userround as(String alias) {
        return new Userround(DSL.name(alias), this);
    }

    @Override
    public Userround as(Name alias) {
        return new Userround(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Userround rename(String name) {
        return new Userround(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userround rename(Name name) {
        return new Userround(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
