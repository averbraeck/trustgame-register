/*
 * This file is generated by jOOQ.
 */
package org.transsonic.trustgame.data.trustgame.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.transsonic.trustgame.data.trustgame.Indexes;
import org.transsonic.trustgame.data.trustgame.Keys;
import org.transsonic.trustgame.data.trustgame.Trustgame;
import org.transsonic.trustgame.data.trustgame.tables.records.ReviewRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Review extends TableImpl<ReviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trustgame.review</code>
     */
    public static final Review REVIEW = new Review();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReviewRecord> getRecordType() {
        return ReviewRecord.class;
    }

    /**
     * The column <code>trustgame.review.ID</code>.
     */
    public final TableField<ReviewRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>trustgame.review.Round_ID</code>.
     */
    public final TableField<ReviewRecord, Integer> ROUND_ID = createField(DSL.name("Round_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.review.Carrier_ID</code>.
     */
    public final TableField<ReviewRecord, Integer> CARRIER_ID = createField(DSL.name("Carrier_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.review.Stars</code>.
     */
    public final TableField<ReviewRecord, Double> STARS = createField(DSL.name("Stars"), SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>trustgame.review.When</code>.
     */
    public final TableField<ReviewRecord, String> WHEN = createField(DSL.name("When"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>trustgame.review.ReviewText</code>.
     */
    public final TableField<ReviewRecord, String> REVIEWTEXT = createField(DSL.name("ReviewText"), SQLDataType.CLOB.defaultValue(DSL.field("NULL", SQLDataType.CLOB)), this, "");

    private Review(Name alias, Table<ReviewRecord> aliased) {
        this(alias, aliased, null);
    }

    private Review(Name alias, Table<ReviewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>trustgame.review</code> table reference
     */
    public Review(String alias) {
        this(DSL.name(alias), REVIEW);
    }

    /**
     * Create an aliased <code>trustgame.review</code> table reference
     */
    public Review(Name alias) {
        this(alias, REVIEW);
    }

    /**
     * Create a <code>trustgame.review</code> table reference
     */
    public Review() {
        this(DSL.name("review"), null);
    }

    public <O extends Record> Review(Table<O> child, ForeignKey<O, ReviewRecord> key) {
        super(child, key, REVIEW);
    }

    @Override
    public Schema getSchema() {
        return Trustgame.TRUSTGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REVIEW_FK_REVIEW_CARRIER1_IDX, Indexes.REVIEW_FK_REVIEW_ROUND1_IDX);
    }

    @Override
    public Identity<ReviewRecord, Integer> getIdentity() {
        return (Identity<ReviewRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReviewRecord> getPrimaryKey() {
        return Keys.KEY_REVIEW_PRIMARY;
    }

    @Override
    public List<UniqueKey<ReviewRecord>> getKeys() {
        return Arrays.<UniqueKey<ReviewRecord>>asList(Keys.KEY_REVIEW_PRIMARY, Keys.KEY_REVIEW_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ReviewRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ReviewRecord, ?>>asList(Keys.FK_REVIEW_ROUND1, Keys.FK_REVIEW_CARRIER1);
    }

    private transient Round _round;
    private transient Carrier _carrier;

    public Round round() {
        if (_round == null)
            _round = new Round(this, Keys.FK_REVIEW_ROUND1);

        return _round;
    }

    public Carrier carrier() {
        if (_carrier == null)
            _carrier = new Carrier(this, Keys.FK_REVIEW_CARRIER1);

        return _carrier;
    }

    @Override
    public Review as(String alias) {
        return new Review(DSL.name(alias), this);
    }

    @Override
    public Review as(Name alias) {
        return new Review(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(String name) {
        return new Review(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(Name name) {
        return new Review(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, Double, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
