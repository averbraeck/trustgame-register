/*
 * This file is generated by jOOQ.
 */
package org.transsonic.trustgame.data.trustgame.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.transsonic.trustgame.data.trustgame.Indexes;
import org.transsonic.trustgame.data.trustgame.Keys;
import org.transsonic.trustgame.data.trustgame.Trustgame;
import org.transsonic.trustgame.data.trustgame.tables.records.OrderRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Order extends TableImpl<OrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trustgame.order</code>
     */
    public static final Order ORDER = new Order();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderRecord> getRecordType() {
        return OrderRecord.class;
    }

    /**
     * The column <code>trustgame.order.ID</code>.
     */
    public final TableField<OrderRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>trustgame.order.Round_ID</code>.
     */
    public final TableField<OrderRecord, Integer> ROUND_ID = createField(DSL.name("Round_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.order.OrderNumber</code>.
     */
    public final TableField<OrderRecord, UInteger> ORDERNUMBER = createField(DSL.name("OrderNumber"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>trustgame.order.Client_ID</code>.
     */
    public final TableField<OrderRecord, Integer> CLIENT_ID = createField(DSL.name("Client_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.order.Description</code>. HTML or Markdown
     */
    public final TableField<OrderRecord, String> DESCRIPTION = createField(DSL.name("Description"), SQLDataType.CLOB.defaultValue(DSL.field("NULL", SQLDataType.CLOB)), this, "HTML or Markdown");

    /**
     * The column <code>trustgame.order.TransportEarnings</code>.
     */
    public final TableField<OrderRecord, Integer> TRANSPORTEARNINGS = createField(DSL.name("TransportEarnings"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.order.Note</code>. E.g., to indicate it is a repeating transport
     */
    public final TableField<OrderRecord, String> NOTE = createField(DSL.name("Note"), SQLDataType.VARCHAR(45).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "E.g., to indicate it is a repeating transport");

    private Order(Name alias, Table<OrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Order(Name alias, Table<OrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>trustgame.order</code> table reference
     */
    public Order(String alias) {
        this(DSL.name(alias), ORDER);
    }

    /**
     * Create an aliased <code>trustgame.order</code> table reference
     */
    public Order(Name alias) {
        this(alias, ORDER);
    }

    /**
     * Create a <code>trustgame.order</code> table reference
     */
    public Order() {
        this(DSL.name("order"), null);
    }

    public <O extends Record> Order(Table<O> child, ForeignKey<O, OrderRecord> key) {
        super(child, key, ORDER);
    }

    @Override
    public Schema getSchema() {
        return Trustgame.TRUSTGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDER_FK_ORDER_CUSTOMER1_IDX, Indexes.ORDER_FK_ORDER_ROUND1_IDX);
    }

    @Override
    public Identity<OrderRecord, Integer> getIdentity() {
        return (Identity<OrderRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrderRecord> getPrimaryKey() {
        return Keys.KEY_ORDER_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrderRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderRecord>>asList(Keys.KEY_ORDER_PRIMARY, Keys.KEY_ORDER_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<OrderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrderRecord, ?>>asList(Keys.FK_ORDER_ROUND1, Keys.FK_ORDER_CUSTOMER1);
    }

    private transient Round _round;
    private transient Client _client;

    public Round round() {
        if (_round == null)
            _round = new Round(this, Keys.FK_ORDER_ROUND1);

        return _round;
    }

    public Client client() {
        if (_client == null)
            _client = new Client(this, Keys.FK_ORDER_CUSTOMER1);

        return _client;
    }

    @Override
    public Order as(String alias) {
        return new Order(DSL.name(alias), this);
    }

    @Override
    public Order as(Name alias) {
        return new Order(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(String name) {
        return new Order(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Name name) {
        return new Order(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, UInteger, Integer, String, Integer, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
