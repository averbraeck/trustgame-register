/*
 * This file is generated by jOOQ.
 */
package org.transsonic.trustgame.data.trustgame.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.transsonic.trustgame.data.trustgame.Indexes;
import org.transsonic.trustgame.data.trustgame.Keys;
import org.transsonic.trustgame.data.trustgame.Trustgame;
import org.transsonic.trustgame.data.trustgame.tables.records.GameuserRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Gameuser extends TableImpl<GameuserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trustgame.gameuser</code>
     */
    public static final Gameuser GAMEUSER = new Gameuser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameuserRecord> getRecordType() {
        return GameuserRecord.class;
    }

    /**
     * The column <code>trustgame.gameuser.ID</code>. Users could self-regster or be created upfront. Users are unique per GamePlay.
     */
    public final TableField<GameuserRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Users could self-regster or be created upfront. Users are unique per GamePlay.");

    /**
     * The column <code>trustgame.gameuser.GamePlay_ID</code>.
     */
    public final TableField<GameuserRecord, Integer> GAMEPLAY_ID = createField(DSL.name("GamePlay_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.gameuser.User_ID</code>.
     */
    public final TableField<GameuserRecord, Integer> USER_ID = createField(DSL.name("User_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.gameuser.FirstLogin</code>.
     */
    public final TableField<GameuserRecord, LocalDateTime> FIRSTLOGIN = createField(DSL.name("FirstLogin"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>trustgame.gameuser.ScoreProfit</code>. Default filled with Organization.StartProfit. Updated every round.
     */
    public final TableField<GameuserRecord, Integer> SCOREPROFIT = createField(DSL.name("ScoreProfit"), SQLDataType.INTEGER.nullable(false), this, "Default filled with Organization.StartProfit. Updated every round.");

    /**
     * The column <code>trustgame.gameuser.ScoreSatisfaction</code>. Default filled with Organization.StartSatisfaction. Updated every round.
     */
    public final TableField<GameuserRecord, Integer> SCORESATISFACTION = createField(DSL.name("ScoreSatisfaction"), SQLDataType.INTEGER.nullable(false), this, "Default filled with Organization.StartSatisfaction. Updated every round.");

    /**
     * The column <code>trustgame.gameuser.ScoreSustainability</code>. Default filled with Organization.StartSustainability. Updated every round.
     */
    public final TableField<GameuserRecord, Integer> SCORESUSTAINABILITY = createField(DSL.name("ScoreSustainability"), SQLDataType.INTEGER.nullable(false), this, "Default filled with Organization.StartSustainability. Updated every round.");

    /**
     * The column <code>trustgame.gameuser.RoundNumber</code>.
     */
    public final TableField<GameuserRecord, UInteger> ROUNDNUMBER = createField(DSL.name("RoundNumber"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>trustgame.gameuser.RoundStatus</code>. When RoundStatus is 0, order confirmation takes place. The top-right button is grey and contains 'Start of day'.
When RoundStatus is 1, the user has finished the day and can start scoring the transport. The top-right button is active and contains 'Finish day'.
When RoundSttaus is 2, the user has finished scoring, and can go to the next day. The top-right button is active and contains Go to next day'.
     */
    public final TableField<GameuserRecord, Integer> ROUNDSTATUS = createField(DSL.name("RoundStatus"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "When RoundStatus is 0, order confirmation takes place. The top-right button is grey and contains 'Start of day'.\nWhen RoundStatus is 1, the user has finished the day and can start scoring the transport. The top-right button is active and contains 'Finish day'.\nWhen RoundSttaus is 2, the user has finished scoring, and can go to the next day. The top-right button is active and contains Go to next day'.");

    private Gameuser(Name alias, Table<GameuserRecord> aliased) {
        this(alias, aliased, null);
    }

    private Gameuser(Name alias, Table<GameuserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>trustgame.gameuser</code> table reference
     */
    public Gameuser(String alias) {
        this(DSL.name(alias), GAMEUSER);
    }

    /**
     * Create an aliased <code>trustgame.gameuser</code> table reference
     */
    public Gameuser(Name alias) {
        this(alias, GAMEUSER);
    }

    /**
     * Create a <code>trustgame.gameuser</code> table reference
     */
    public Gameuser() {
        this(DSL.name("gameuser"), null);
    }

    public <O extends Record> Gameuser(Table<O> child, ForeignKey<O, GameuserRecord> key) {
        super(child, key, GAMEUSER);
    }

    @Override
    public Schema getSchema() {
        return Trustgame.TRUSTGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GAMEUSER_FK_USER_GAMEPLAY1_IDX, Indexes.GAMEUSER_FK_USER_USERS1_IDX);
    }

    @Override
    public Identity<GameuserRecord, Integer> getIdentity() {
        return (Identity<GameuserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameuserRecord> getPrimaryKey() {
        return Keys.KEY_GAMEUSER_PRIMARY;
    }

    @Override
    public List<UniqueKey<GameuserRecord>> getKeys() {
        return Arrays.<UniqueKey<GameuserRecord>>asList(Keys.KEY_GAMEUSER_PRIMARY, Keys.KEY_GAMEUSER_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GameuserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GameuserRecord, ?>>asList(Keys.FK_USER_GAMEPLAY1, Keys.FK_USER_USERS1);
    }

    private transient Gameplay _gameplay;
    private transient User _user;

    public Gameplay gameplay() {
        if (_gameplay == null)
            _gameplay = new Gameplay(this, Keys.FK_USER_GAMEPLAY1);

        return _gameplay;
    }

    public User user() {
        if (_user == null)
            _user = new User(this, Keys.FK_USER_USERS1);

        return _user;
    }

    @Override
    public Gameuser as(String alias) {
        return new Gameuser(DSL.name(alias), this);
    }

    @Override
    public Gameuser as(Name alias) {
        return new Gameuser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Gameuser rename(String name) {
        return new Gameuser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Gameuser rename(Name name) {
        return new Gameuser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, Integer, LocalDateTime, Integer, Integer, Integer, UInteger, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
