/*
 * This file is generated by jOOQ.
 */
package org.transsonic.trustgame.data.trustgame.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.transsonic.trustgame.data.trustgame.Indexes;
import org.transsonic.trustgame.data.trustgame.Keys;
import org.transsonic.trustgame.data.trustgame.Trustgame;
import org.transsonic.trustgame.data.trustgame.tables.records.SelectedcarrierRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Selectedcarrier extends TableImpl<SelectedcarrierRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trustgame.selectedcarrier</code>
     */
    public static final Selectedcarrier SELECTEDCARRIER = new Selectedcarrier();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SelectedcarrierRecord> getRecordType() {
        return SelectedcarrierRecord.class;
    }

    /**
     * The column <code>trustgame.selectedcarrier.ID</code>.
     */
    public final TableField<SelectedcarrierRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>trustgame.selectedcarrier.UserOrder_ID</code>.
     */
    public final TableField<SelectedcarrierRecord, Integer> USERORDER_ID = createField(DSL.name("UserOrder_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.selectedcarrier.OrderCarrier_ID</code>.
     */
    public final TableField<SelectedcarrierRecord, Integer> ORDERCARRIER_ID = createField(DSL.name("OrderCarrier_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.selectedcarrier.SelectionTime</code>.
     */
    public final TableField<SelectedcarrierRecord, LocalDateTime> SELECTIONTIME = createField(DSL.name("SelectionTime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>trustgame.selectedcarrier.UserScore</code>.
     */
    public final TableField<SelectedcarrierRecord, Double> USERSCORE = createField(DSL.name("UserScore"), SQLDataType.FLOAT.defaultValue(DSL.field("NULL", SQLDataType.FLOAT)), this, "");

    private Selectedcarrier(Name alias, Table<SelectedcarrierRecord> aliased) {
        this(alias, aliased, null);
    }

    private Selectedcarrier(Name alias, Table<SelectedcarrierRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>trustgame.selectedcarrier</code> table reference
     */
    public Selectedcarrier(String alias) {
        this(DSL.name(alias), SELECTEDCARRIER);
    }

    /**
     * Create an aliased <code>trustgame.selectedcarrier</code> table reference
     */
    public Selectedcarrier(Name alias) {
        this(alias, SELECTEDCARRIER);
    }

    /**
     * Create a <code>trustgame.selectedcarrier</code> table reference
     */
    public Selectedcarrier() {
        this(DSL.name("selectedcarrier"), null);
    }

    public <O extends Record> Selectedcarrier(Table<O> child, ForeignKey<O, SelectedcarrierRecord> key) {
        super(child, key, SELECTEDCARRIER);
    }

    @Override
    public Schema getSchema() {
        return Trustgame.TRUSTGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SELECTEDCARRIER_FK_SELECTEDCARRIER_ORDERCARRIER1_IDX, Indexes.SELECTEDCARRIER_FK_SELECTEDCARRIER_USERORDER1_IDX);
    }

    @Override
    public Identity<SelectedcarrierRecord, Integer> getIdentity() {
        return (Identity<SelectedcarrierRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SelectedcarrierRecord> getPrimaryKey() {
        return Keys.KEY_SELECTEDCARRIER_PRIMARY;
    }

    @Override
    public List<UniqueKey<SelectedcarrierRecord>> getKeys() {
        return Arrays.<UniqueKey<SelectedcarrierRecord>>asList(Keys.KEY_SELECTEDCARRIER_PRIMARY, Keys.KEY_SELECTEDCARRIER_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<SelectedcarrierRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SelectedcarrierRecord, ?>>asList(Keys.FK_SELECTEDCARRIER_USERORDER1, Keys.FK_SELECTEDCARRIER_ORDERCARRIER1);
    }

    private transient Userorder _userorder;
    private transient Ordercarrier _ordercarrier;

    public Userorder userorder() {
        if (_userorder == null)
            _userorder = new Userorder(this, Keys.FK_SELECTEDCARRIER_USERORDER1);

        return _userorder;
    }

    public Ordercarrier ordercarrier() {
        if (_ordercarrier == null)
            _ordercarrier = new Ordercarrier(this, Keys.FK_SELECTEDCARRIER_ORDERCARRIER1);

        return _ordercarrier;
    }

    @Override
    public Selectedcarrier as(String alias) {
        return new Selectedcarrier(DSL.name(alias), this);
    }

    @Override
    public Selectedcarrier as(Name alias) {
        return new Selectedcarrier(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Selectedcarrier rename(String name) {
        return new Selectedcarrier(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Selectedcarrier rename(Name name) {
        return new Selectedcarrier(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, LocalDateTime, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
