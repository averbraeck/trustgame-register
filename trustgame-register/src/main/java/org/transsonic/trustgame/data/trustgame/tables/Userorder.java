/*
 * This file is generated by jOOQ.
 */
package org.transsonic.trustgame.data.trustgame.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.transsonic.trustgame.data.trustgame.Indexes;
import org.transsonic.trustgame.data.trustgame.Keys;
import org.transsonic.trustgame.data.trustgame.Trustgame;
import org.transsonic.trustgame.data.trustgame.tables.records.UserorderRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Userorder extends TableImpl<UserorderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trustgame.userorder</code>
     */
    public static final Userorder USERORDER = new Userorder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserorderRecord> getRecordType() {
        return UserorderRecord.class;
    }

    /**
     * The column <code>trustgame.userorder.ID</code>.
     */
    public final TableField<UserorderRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>trustgame.userorder.UserRound_ID</code>.
     */
    public final TableField<UserorderRecord, Integer> USERROUND_ID = createField(DSL.name("UserRound_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.userorder.Order_ID</code>.
     */
    public final TableField<UserorderRecord, Integer> ORDER_ID = createField(DSL.name("Order_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.userorder.Published</code>. Boolean 0 or 1
     */
    public final TableField<UserorderRecord, Byte> PUBLISHED = createField(DSL.name("Published"), SQLDataType.TINYINT.nullable(false), this, "Boolean 0 or 1");

    private Userorder(Name alias, Table<UserorderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Userorder(Name alias, Table<UserorderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>trustgame.userorder</code> table reference
     */
    public Userorder(String alias) {
        this(DSL.name(alias), USERORDER);
    }

    /**
     * Create an aliased <code>trustgame.userorder</code> table reference
     */
    public Userorder(Name alias) {
        this(alias, USERORDER);
    }

    /**
     * Create a <code>trustgame.userorder</code> table reference
     */
    public Userorder() {
        this(DSL.name("userorder"), null);
    }

    public <O extends Record> Userorder(Table<O> child, ForeignKey<O, UserorderRecord> key) {
        super(child, key, USERORDER);
    }

    @Override
    public Schema getSchema() {
        return Trustgame.TRUSTGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERORDER_FK_USERORDER_GAMEPLAYROUND1_IDX, Indexes.USERORDER_FK_USERORDER_ORDER1_IDX);
    }

    @Override
    public Identity<UserorderRecord, Integer> getIdentity() {
        return (Identity<UserorderRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserorderRecord> getPrimaryKey() {
        return Keys.KEY_USERORDER_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserorderRecord>> getKeys() {
        return Arrays.<UniqueKey<UserorderRecord>>asList(Keys.KEY_USERORDER_PRIMARY, Keys.KEY_USERORDER_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<UserorderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserorderRecord, ?>>asList(Keys.FK_USERORDER_GAMEPLAYROUND1, Keys.FK_USERORDER_ORDER1);
    }

    private transient Userround _userround;
    private transient Order _order;

    public Userround userround() {
        if (_userround == null)
            _userround = new Userround(this, Keys.FK_USERORDER_GAMEPLAYROUND1);

        return _userround;
    }

    public Order order() {
        if (_order == null)
            _order = new Order(this, Keys.FK_USERORDER_ORDER1);

        return _order;
    }

    @Override
    public Userorder as(String alias) {
        return new Userorder(DSL.name(alias), this);
    }

    @Override
    public Userorder as(Name alias) {
        return new Userorder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Userorder rename(String name) {
        return new Userorder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userorder rename(Name name) {
        return new Userorder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Byte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
