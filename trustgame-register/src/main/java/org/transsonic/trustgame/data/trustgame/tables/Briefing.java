/*
 * This file is generated by jOOQ.
 */
package org.transsonic.trustgame.data.trustgame.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.transsonic.trustgame.data.trustgame.Keys;
import org.transsonic.trustgame.data.trustgame.Trustgame;
import org.transsonic.trustgame.data.trustgame.tables.records.BriefingRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Briefing extends TableImpl<BriefingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trustgame.briefing</code>
     */
    public static final Briefing BRIEFING = new Briefing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BriefingRecord> getRecordType() {
        return BriefingRecord.class;
    }

    /**
     * The column <code>trustgame.briefing.ID</code>.
     */
    public final TableField<BriefingRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>trustgame.briefing.Name</code>.
     */
    public final TableField<BriefingRecord, String> NAME = createField(DSL.name("Name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>trustgame.briefing.BriefingText</code>.
     */
    public final TableField<BriefingRecord, String> BRIEFINGTEXT = createField(DSL.name("BriefingText"), SQLDataType.CLOB.defaultValue(DSL.field("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>trustgame.briefing.BriefingImage</code>.
     */
    public final TableField<BriefingRecord, byte[]> BRIEFINGIMAGE = createField(DSL.name("BriefingImage"), SQLDataType.BLOB.defaultValue(DSL.field("NULL", SQLDataType.BLOB)), this, "");

    private Briefing(Name alias, Table<BriefingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Briefing(Name alias, Table<BriefingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>trustgame.briefing</code> table reference
     */
    public Briefing(String alias) {
        this(DSL.name(alias), BRIEFING);
    }

    /**
     * Create an aliased <code>trustgame.briefing</code> table reference
     */
    public Briefing(Name alias) {
        this(alias, BRIEFING);
    }

    /**
     * Create a <code>trustgame.briefing</code> table reference
     */
    public Briefing() {
        this(DSL.name("briefing"), null);
    }

    public <O extends Record> Briefing(Table<O> child, ForeignKey<O, BriefingRecord> key) {
        super(child, key, BRIEFING);
    }

    @Override
    public Schema getSchema() {
        return Trustgame.TRUSTGAME;
    }

    @Override
    public Identity<BriefingRecord, Integer> getIdentity() {
        return (Identity<BriefingRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BriefingRecord> getPrimaryKey() {
        return Keys.KEY_BRIEFING_PRIMARY;
    }

    @Override
    public List<UniqueKey<BriefingRecord>> getKeys() {
        return Arrays.<UniqueKey<BriefingRecord>>asList(Keys.KEY_BRIEFING_PRIMARY, Keys.KEY_BRIEFING_ID_UNIQUE);
    }

    @Override
    public Briefing as(String alias) {
        return new Briefing(DSL.name(alias), this);
    }

    @Override
    public Briefing as(Name alias) {
        return new Briefing(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Briefing rename(String name) {
        return new Briefing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Briefing rename(Name name) {
        return new Briefing(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
