/*
 * This file is generated by jOOQ.
 */
package org.transsonic.trustgame.data.trustgame.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.transsonic.trustgame.data.trustgame.Indexes;
import org.transsonic.trustgame.data.trustgame.Keys;
import org.transsonic.trustgame.data.trustgame.Trustgame;
import org.transsonic.trustgame.data.trustgame.tables.records.MissionRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mission extends TableImpl<MissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trustgame.mission</code>
     */
    public static final Mission MISSION = new Mission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MissionRecord> getRecordType() {
        return MissionRecord.class;
    }

    /**
     * The column <code>trustgame.mission.ID</code>.
     */
    public final TableField<MissionRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>trustgame.mission.Game_ID</code>.
     */
    public final TableField<MissionRecord, Integer> GAME_ID = createField(DSL.name("Game_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trustgame.mission.Name</code>.
     */
    public final TableField<MissionRecord, String> NAME = createField(DSL.name("Name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>trustgame.mission.Description</code>. HTML or Markdown
     */
    public final TableField<MissionRecord, String> DESCRIPTION = createField(DSL.name("Description"), SQLDataType.CLOB.nullable(false), this, "HTML or Markdown");

    /**
     * The column <code>trustgame.mission.TargetProfit</code>. Target line of the score chart
     */
    public final TableField<MissionRecord, Integer> TARGETPROFIT = createField(DSL.name("TargetProfit"), SQLDataType.INTEGER.nullable(false), this, "Target line of the score chart");

    /**
     * The column <code>trustgame.mission.TargetSatisfaction</code>. Target line of the score chart
     */
    public final TableField<MissionRecord, Integer> TARGETSATISFACTION = createField(DSL.name("TargetSatisfaction"), SQLDataType.INTEGER.nullable(false), this, "Target line of the score chart");

    /**
     * The column <code>trustgame.mission.TargetSustainability</code>. Target line of the score chart
     */
    public final TableField<MissionRecord, Integer> TARGETSUSTAINABILITY = createField(DSL.name("TargetSustainability"), SQLDataType.INTEGER.nullable(false), this, "Target line of the score chart");

    /**
     * The column <code>trustgame.mission.StartProfit</code>. Start score of profit for a player
     */
    public final TableField<MissionRecord, Integer> STARTPROFIT = createField(DSL.name("StartProfit"), SQLDataType.INTEGER.nullable(false), this, "Start score of profit for a player");

    /**
     * The column <code>trustgame.mission.StartSatisfaction</code>. Start score of satisfaction for a player
     */
    public final TableField<MissionRecord, Integer> STARTSATISFACTION = createField(DSL.name("StartSatisfaction"), SQLDataType.INTEGER.nullable(false), this, "Start score of satisfaction for a player");

    /**
     * The column <code>trustgame.mission.StartSustainability</code>. Start score of sustainability for a player
     */
    public final TableField<MissionRecord, Integer> STARTSUSTAINABILITY = createField(DSL.name("StartSustainability"), SQLDataType.INTEGER.nullable(false), this, "Start score of sustainability for a player");

    /**
     * The column <code>trustgame.mission.MaxProfit</code>. Top of the score chart
     */
    public final TableField<MissionRecord, Integer> MAXPROFIT = createField(DSL.name("MaxProfit"), SQLDataType.INTEGER.nullable(false), this, "Top of the score chart");

    /**
     * The column <code>trustgame.mission.MaxSatisfaction</code>. Top of the score chart
     */
    public final TableField<MissionRecord, Integer> MAXSATISFACTION = createField(DSL.name("MaxSatisfaction"), SQLDataType.INTEGER.nullable(false), this, "Top of the score chart");

    /**
     * The column <code>trustgame.mission.MaxSustainability</code>. Top of the score chart
     */
    public final TableField<MissionRecord, Integer> MAXSUSTAINABILITY = createField(DSL.name("MaxSustainability"), SQLDataType.INTEGER.nullable(false), this, "Top of the score chart");

    private Mission(Name alias, Table<MissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mission(Name alias, Table<MissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>trustgame.mission</code> table reference
     */
    public Mission(String alias) {
        this(DSL.name(alias), MISSION);
    }

    /**
     * Create an aliased <code>trustgame.mission</code> table reference
     */
    public Mission(Name alias) {
        this(alias, MISSION);
    }

    /**
     * Create a <code>trustgame.mission</code> table reference
     */
    public Mission() {
        this(DSL.name("mission"), null);
    }

    public <O extends Record> Mission(Table<O> child, ForeignKey<O, MissionRecord> key) {
        super(child, key, MISSION);
    }

    @Override
    public Schema getSchema() {
        return Trustgame.TRUSTGAME;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MISSION_FK_MISSION_GAME1_IDX);
    }

    @Override
    public Identity<MissionRecord, Integer> getIdentity() {
        return (Identity<MissionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MissionRecord> getPrimaryKey() {
        return Keys.KEY_MISSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<MissionRecord>> getKeys() {
        return Arrays.<UniqueKey<MissionRecord>>asList(Keys.KEY_MISSION_PRIMARY, Keys.KEY_MISSION_ID_UNIQUE, Keys.KEY_MISSION_GAME_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<MissionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MissionRecord, ?>>asList(Keys.FK_MISSION_GAME1);
    }

    private transient Game _game;

    public Game game() {
        if (_game == null)
            _game = new Game(this, Keys.FK_MISSION_GAME1);

        return _game;
    }

    @Override
    public Mission as(String alias) {
        return new Mission(DSL.name(alias), this);
    }

    @Override
    public Mission as(Name alias) {
        return new Mission(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mission rename(String name) {
        return new Mission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mission rename(Name name) {
        return new Mission(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, Integer, String, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
